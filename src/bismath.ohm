Bismath {

  Program     = Statement+
	
  Statement   = MathStmt endline                             -- simple
                | Loop       
                | Conditional       
                | Function       
         
  Block      = "{" Statement* "}" endline                         -- small
                | "{"  Statement+ "}" endline                    -- complex
                       
  MathStmt  = Type id "=" Exp 						               -- assignment
  				      | id "=" Exp                              	 -- assign
  				      | put Exp                                    -- print					
                | output Exp?                                -- return
                | getout                                     -- break
                | Exp      
       
  Exp       = ("-" | "!") Exp7                               -- unary
            | Exp1 "?" Exp1 ":" Exp                          -- ternary
            | Exp1       
  Exp1      = Exp1 "||" Exp2                                 -- binary
            | Exp2       
  Exp2      = Exp2 "&&" Exp3                                 -- binary
            | Exp3       
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4        -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-" | "|+|" | "|-|" | "<+>" | "<->") Exp5                          -- binary
            | Exp5       
  Exp5      = Exp5 ("*" | "/" | "%" | "|*|" | "|D|" | "|T|" | "<*>") Exp6                    -- binary
            | Exp6       
  Exp6      = Exp7 "**" Exp6                                 -- binary
            | Exp7       
  Exp7      = num       
            | true       
            | false       
            | Call       
            | id
            | Array
            | Matrix  
            | Vector
            | Point     
            | "(" Exp ")"                                    -- parens

  Loop  = for (NumTypes | GeneralTypes) id in Exp Block                             -- for  
            | while Exp Block
                                 -- while
  Conditional = ifconditional Exp Block       
             (otherwise Exp Block
          )*						              -- if
  
  Function    = function Type id "(" Params ")" Block

  Call      = id "(" Args ")"
  Params    = ListOf<id, ",">
  Args      = ListOf<Exp, ",">

  Array     = "[" ListOf<Exp, ","> "]"
  Matrix    = "|" ListOf< ListOf<num, ",">, ";" > "|"
  Vector   =  "<" num "," num ("," num)? ">"
  Point     =  "(" num "," num ("," num)? ")"
  
  Type =  (StructTypes | NumTypes | GeneralTypes) 
  StructTypes = "[" (NumTypes | GeneralTypes) "]" | "|" NumTypes "|" | "<" NumTypes ">" | "(" NumTypes ")"
  NumTypes = "int32" | "int64" | "int" | "float32" | "float64" | "float"
  GeneralTypes = "bool" | "string"

  in     	  = "in"  ~idchar
  declare   = "declare" ~idchar
  function  = "function" ~idchar
  for 	  	= "for" ~ idchar
  while     = "while" ~idchar
  true      = "true" ~idchar
  false     = "false" ~idchar
  put       = "put" ~idchar
  getout    = "getout" ~idchar
  ifconditional = "ifconditional" ~idchar
  otherwise = "otherwise" ~idchar
  output    = "output" ~idchar
  keyword   = declare | function | while | true | false | put | getout | ifconditional 
  			| otherwise | output | for
  num       = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id        = ~keyword letter idchar*
  idchar    = letter | digit | "_"
  space    += "//" (~"\n" any)* ("\n" | end)                 -- comment
  newline     = "\n"+
  endline    = ";"
}
